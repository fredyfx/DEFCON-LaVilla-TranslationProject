@page "/files/search"
@model defconflix.Pages.FileSearch.FileSearchModel
@{
    ViewData["Title"] = "File Search";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h2>DEFCON File Search</h2>

            <!-- Search Form -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Search Files</h5>
                </div>
                <div class="card-body">
                    <form method="get" id="searchForm">
                        <div class="row">
                            <div class="col-md-3">
                                <label for="fileType" class="form-label">File Type</label>
                                <select class="form-select" id="fileType" name="fileType" asp-for="FileType">
                                    <option value="">Select file type</option>
                                    <option value="mp4">MP4 Videos</option>
                                    <option value="pdf">PDF Documents</option>
                                    <option value="srt">SRT Subtitles</option>
                                    <option value="txt">Text Files</option>
                                    <option value="all">All Types</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="conference" class="form-label">Conference</label>
                                <select class="form-select" id="conference" name="conference" asp-for="Conference">
                                    <option value="">Select conference</option>
                                    @foreach (var conf in Model.AvailableConferences)
                                    {
                                        <option value="@conf.Id">@conf.DisplayName (@conf.FileCount files)</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="searchTerm" class="form-label">Search Term</label>
                                <input type="text" class="form-control" id="searchTerm" name="searchTerm"
                                       asp-for="SearchTerm" placeholder="Enter search term...">
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="fas fa-search"></i> Search
                                </button>
                            </div>
                        </div>
                        <input type="hidden" name="page" value="1" />
                        <input type="hidden" name="pageSize" value="@Model.PageSize" />
                    </form>
                </div>
            </div>

            <!-- Results Section -->
            @if (Model.Files?.Any() == true)
            {
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>Search Results (@Model.TotalFiles files found)</h5>
                        <div>
                            <button type="button" class="btn btn-success me-2" id="selectAllBtn">
                                <i class="fas fa-check-square"></i> Select All
                            </button>
                            <button type="button" class="btn btn-warning me-2" id="clearAllBtn">
                                <i class="fas fa-square"></i> Clear All
                            </button>
                            <button type="button" class="btn btn-primary" id="downloadSelectedBtn" disabled>
                                <i class="fas fa-download"></i> Download Selected (<span id="selectedCount">0</span>)
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Files Grid -->
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th width="50">
                                            <input type="checkbox" id="masterCheckbox" class="form-check-input">
                                        </th>
                                        <th>ID</th>
                                        <th>File Name</th>
                                        <th>Status</th>
                                        <th width="100">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var file in Model.Files)
                                    {
                                        <tr>
                                            <td>
                                                <input type="checkbox" class="form-check-input file-checkbox"
                                                       value="@file.Id" data-filename="@file.FileName">
                                            </td>
                                            <td>@file.Id</td>
                                            <td>
                                                <span class="fw-medium">@file.FileName</span>
                                            </td>
                                            <td>
                                                @{
                                                    var statusClass = file.Status switch
                                                    {
                                                        "Completed" => "badge bg-success",
                                                        "In Progress" => "badge bg-warning text-dark",
                                                        "Not started" => "badge bg-secondary",
                                                        _ => "badge bg-light text-dark"
                                                    };
                                                }
                                                <span class="@statusClass">@file.Status</span>
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-sm btn-outline-primary"
                                                        onclick="downloadSingle(@file.Id)">
                                                    <i class="fas fa-download"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (Model.TotalPages > 1)
                        {
                            <nav aria-label="File search pagination">
                                <ul class="pagination justify-content-center">
                                    @if (Model.HasPreviousPage)
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="@GetPageUrl(1)">First</a>
                                        </li>
                                        <li class="page-item">
                                            <a class="page-link" href="@GetPageUrl(Model.CurrentPage - 1)">Previous</a>
                                        </li>
                                    }

                                    @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                            <a class="page-link" href="@GetPageUrl(i)">@i</a>
                                        </li>
                                    }

                                    @if (Model.HasNextPage)
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="@GetPageUrl(Model.CurrentPage + 1)">Next</a>
                                        </li>
                                        <li class="page-item">
                                            <a class="page-link" href="@GetPageUrl(Model.TotalPages)">Last</a>
                                        </li>
                                    }
                                </ul>
                            </nav>
                        }
                    </div>
                </div>
            }
            else if (!string.IsNullOrEmpty(Model.SearchTerm) || !string.IsNullOrEmpty(Model.FileType))
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> No files found matching your search criteria.
                </div>
            }
            else
            {
                <div class="alert alert-secondary">
                    <i class="fas fa-search"></i> Use the search form above to find files.
                </div>
            }
        </div>
    </div>
</div>

<!-- Loading Modal -->
<div class="modal fade" id="loadingModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Preparing your download...</p>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetPageUrl(int page)
    {
        var queryParams = new List<string>();

        if (!string.IsNullOrEmpty(Model.FileType))
            queryParams.Add($"fileType={Uri.EscapeDataString(Model.FileType)}");

        if (!string.IsNullOrEmpty(Model.Conference))
            queryParams.Add($"conference={Uri.EscapeDataString(Model.Conference)}");

        if (!string.IsNullOrEmpty(Model.SearchTerm))
            queryParams.Add($"searchTerm={Uri.EscapeDataString(Model.SearchTerm)}");

        queryParams.Add($"page={page}");
        queryParams.Add($"pageSize={Model.PageSize}");

        return $"/files/search?{string.Join("&", queryParams)}";
    }
}

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const masterCheckbox = document.getElementById('masterCheckbox');
        const fileCheckboxes = document.querySelectorAll('.file-checkbox');
        const selectedCountSpan = document.getElementById('selectedCount');
        const downloadSelectedBtn = document.getElementById('downloadSelectedBtn');
        const selectAllBtn = document.getElementById('selectAllBtn');
        const clearAllBtn = document.getElementById('clearAllBtn');
        const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));

        function updateSelectedCount() {
            const checkedBoxes = document.querySelectorAll('.file-checkbox:checked');
            const count = checkedBoxes.length;
            selectedCountSpan.textContent = count;
            downloadSelectedBtn.disabled = count === 0;

            // Update master checkbox state
            if (count === 0) {
                masterCheckbox.indeterminate = false;
                masterCheckbox.checked = false;
            } else if (count === fileCheckboxes.length) {
                masterCheckbox.indeterminate = false;
                masterCheckbox.checked = true;
            } else {
                masterCheckbox.indeterminate = true;
                masterCheckbox.checked = false;
            }
        }

        // Master checkbox functionality
        masterCheckbox.addEventListener('change', function() {
            fileCheckboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
            updateSelectedCount();
        });

        // Individual checkbox functionality
        fileCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', updateSelectedCount);
        });

        // Select all button
        selectAllBtn.addEventListener('click', function() {
            fileCheckboxes.forEach(checkbox => {
                checkbox.checked = true;
            });
            updateSelectedCount();
        });

        // Clear all button
        clearAllBtn.addEventListener('click', function() {
            fileCheckboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            updateSelectedCount();
        });

        // Download selected functionality
        downloadSelectedBtn.addEventListener('click', function() {
            const checkedBoxes = document.querySelectorAll('.file-checkbox:checked');
            const ids = Array.from(checkedBoxes).map(cb => parseInt(cb.value));

            if (ids.length === 0) {
                alert('Please select at least one file to download.');
                return;
            }

            downloadFiles(ids);
        });

        function downloadFiles(ids) {
            loadingModal.show();

            // Determine which endpoint to use based on count
            if (ids.length <= 20) {
                // Use GET endpoint
                const idsParam = ids.join(',');
                const url = `/api/files/download?ids=${idsParam}`;

                // Create a temporary link to trigger download
                const link = document.createElement('a');
                link.href = url;
                link.download = '';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                loadingModal.hide();
            } else {
                // Use POST endpoint
                fetch('/api/files/download', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ Ids: ids })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.blob();
                })
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = `defcon_urls_${new Date().toISOString().slice(0,10)}.txt`;
                    document.body.appendChild(link);
                    link.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(link);
                    loadingModal.hide();
                })
                .catch(error => {
                    console.error('Download error:', error);
                    alert('An error occurred while downloading files. Please try again.');
                    loadingModal.hide();
                });
            }
        }

        // Single file download
        window.downloadSingle = function(id) {
            downloadFiles([id]);
        };

        // Initialize count
        updateSelectedCount();
    });
</script>

<style>
    .table th {
        border-top: none;
    }

    .badge {
        font-size: 0.75em;
    }

    .pagination {
        margin-top: 20px;
    }

    .card-header h5 {
        margin-bottom: 0;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }

    .form-check-input:indeterminate {
        background-color: #6c757d;
        border-color: #6c757d;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10h8'/%3e%3c/svg%3e");
    }
</style>